<?xml version="1.0"?>
<!--
   ANT Buildfile - Builds the Arduino IDE
   Copyright (C) 2009 Christopher Ladden All rights reserved.

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this library; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301
   USA
-->
<project name="Antipasto_Arduino" basedir="." default="main">

    <!--
        ===================================================================
         Load the project's resources (ANT libraries)
        ===================================================================
    -->
    <typedef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
             <pathelement location="tools/apache-ant/library/ant-contrib/ant-contrib-1.0b3.jar" />
        </classpath>
    </typedef>

    <!--
        ===================================================================
         Load the project's properties
        ===================================================================
    -->
    <import file="build.properties.xml" />

    <target name="clean.all" depends="clean.cores, clean.external, clean.plugins, clean.OS"/>
    <target name="get.all"   depends="get.cores, get.plugins, get.external, get.OS"/>
    <target name="build.all" depends="build.plugins, build.external, build.java"/>
    <target name="dist.all"  depends="clean.all, get.all, build.all, dist.OS"/>
    <target name="run.all"      depends="run.OS"/>
    <target name="package.all"  depends="package.OS"/>
    <target name="upload.all"   depends="upload.OS"/>

    <!-- The default target if no ant params are specified -->
    <target name="main"         depends="dist.all, run.all"/>


    <!--
        ===================================================================
         Clean Targets
        ===================================================================
    -->
    <target name="clean.plugins">
        <echoproperties/>
        <ant dir="plugins"  target="clean.all" />
    </target>

    <target name="clean.external">
        <ant dir="external"  target="clean.all" />
    </target>

    <target name="clean.OS">
        <delete dir="${build.dir}" />
        <delete dir="${package.dir}" />
    </target>

    <target name="clean.cores">
        <!-- Clean Illuminato X Machina -->
        <delete dir="hardware/cores/ixm"/>
    </target>


    <!--
        ===================================================================
         Get Targets
        ===================================================================
    -->
    <target name="get.plugins">
        <ant dir="plugins"  target="get.all" />
    </target>

    <target name="get.external">
        <ant dir="external"  target="get.all" />
    </target>

    <target name="get.cores">
        <!-- Get Illuminato X Machina Core -->
        <get src="http://livingcomputation.com/ixm/pub/sfb-latest.zip"
             dest="hardware/cores/sfb-latest.zip"/>
        <unzip src="hardware/cores/sfb-latest.zip"
               dest="hardware/cores"/>
        <move file="hardware/cores/SFB" tofile="hardware/cores/ixm"/>
        <delete file="hardware/cores/sfb-latest.zip"/>
        <!-- Get Illuminato X Machina Docs -->
        <get src="http://livingcomputation.com/ixm/pub/sfb-latest-html-docs.zip"
             dest="hardware/cores/ixm/sfb-latest-html-docs.zip"/>
        <unzip src="hardware/cores/ixm/sfb-latest-html-docs.zip"
               dest="hardware/cores/ixm"/>
        <move file="hardware/cores/ixm/html" tofile="hardware/cores/ixm/reference"/>
        <delete file="hardware/cores/ixm/sfb-latest-html-docs.zip"/>
    </target>


    <!--
        ===================================================================
         Build Targets
        ===================================================================
    -->

    <!--
        ===================================================================
         Build the project's native Java source
        ===================================================================
    -->
    <target name="build.java" >
        <path id="classpath">
            <fileset dir="${build.dir}/lib" includes="**/*.jar"/>
        </path>
        <property name="classes.dir" value="${build.dir}/classes"/>
        <property name="jar.dir"     value="${build.dir}/jar"/>

        <!-- Substitute the token with the build version -->
        <replace file="processing/app/Base.java" token="@BUILD_VERSION" value="${build.version}"/>

        <!--  Compile -->
        <property name="src.java.antipasto"     value="antipasto"/>
        <property name="src.java.processing"    value="processing"/>

            <mkdir dir="${classes.dir}"/>
            <javac srcdir="${src.java.antipasto};
                           ${src.java.processing};" destdir="${classes.dir}" classpathref="classpath"/>


        <!-- Jar -->
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>

    </target>

    <!--
        ===================================================================
         Build the project's plugins
        ===================================================================
    -->
    <target name="build.plugins">

        <!-- Build all the plugins -->
        <ant dir="plugins"  target="build.all" />

        <!--Copy the plugins to the plugin directory -->
        <mkdir dir="${build.dir}/plugins" />
        <copy todir="${build.dir}/plugins" flatten="true">
            <fileset dir="plugins">
                <include name="**/*.zip"/>
            </fileset>
        </copy>

    </target>

    <!--
        ===================================================================
         Build the project's external components
        ===================================================================
    -->
    <target name="build.external">
        <!-- Build all external -->
        <ant dir="external"  target="build.all" />

        <!-- Copy the external jars to the lib directory -->
        <copy todir="${build.dir}/lib" flatten="true">
            <fileset dir="external">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
    </target>


    <!--
        ===================================================================
         Distribution Targets
        ===================================================================
    -->
    <macrodef name="setup-shared">
        <sequential>
            <copy todir="${build.dir}/lib">
                <fileset dir="build/shared/lib"/>
            </copy>
            <copy todir="${build.dir}/hardware">
                <fileset dir="hardware"/>
            </copy>
            <copy todir="${build.dir}">
                <fileset dir="build/shared/dist"/>
            </copy>

            <!-- Extract the Arduino Reference -->
            <unzip src="build/shared/reference.zip" dest="${build.dir}/hardware/cores/arduino">
                <patternset>
                    <exclude name="**/*.css"/>
                </patternset>
            </unzip>

            <unzip src="build/shared/jruby.zip"     dest="${build.dir}/hardware/tools" />
        </sequential>
    </macrodef>

    <macrodef name="setup-windows">
        <sequential>
            <copy todir="${build.dir}/lib">
                <fileset dir="build/windows/dist">
                    <include name="*.dll"/>
                </fileset>
            </copy>
            <copy todir="${build.dir}/drivers">
                <fileset dir="build/windows/dist/drivers" />
            </copy>
            <unzip src="build/windows/dist/tools/avr_tools.zip"  dest="${build.dir}/hardware"/>
            <unzip src="build/windows/dist/tools/arm_tools.zip"  dest="${build.dir}/hardware/tools" />
            <copy file="build/windows/dist/tools/sfbdl.exe"      todir="${build.dir}/hardware/uploaders/bin"/>
            <copy file="build/windows/dist/tools/sfbprog.exe"    todir="${build.dir}/hardware/uploaders/bin"/>
            <copy file="build/windows/dist/tools/sfbmon.exe"     todir="${build.dir}/hardware/uploaders/bin"/>
            <unzip src="build/windows/jre.zip"                   dest="${build.dir}"/>
        </sequential>
    </macrodef>

    <macrodef name="setup-linux">
        <sequential>
            <copy todir="${build.dir}/lib">
                <fileset dir="build/linux/dist/lib" />
            </copy>
            <mkdir dir="${build.dir}/hardware/tools/avr/bin" />
            <mkdir dir="${build.dir}/hardware/tools/avr/etc" />
            <unzip src="build/linux/dist/tools/arm_tools_linux.zip"   dest="${build.dir}/hardware/tools" />
            <unzip src="build/linux/dist/tools/avr_tools_linux.zip"   dest="${build.dir}/hardware/tools" />

            <delete file="${build.dir}/hardware/tools/avr/bin/avrdude" />
            <delete file="${build.dir}/hardware/tools/avr/etc/avrdude.conf" />

            <copy file="build/linux/dist/tools/avrdude"         todir="${build.dir}/hardware/tools/avr/bin" />
	        <copy file="build/linux/dist/tools/avrdude.conf"    todir="${build.dir}/hardware/tools/avr/etc" />
            <copy file="build/linux/dist/tools/sfbdl"           todir="${build.dir}/hardware/uploaders/bin"/>
            <copy file="build/linux/dist/tools/sfbprog"           todir="${build.dir}/hardware/uploaders/bin"/>
            <copy file="build/linux/dist/tools/sfbmon"           todir="${build.dir}/hardware/uploaders/bin"/>
            <copy file="build/linux/dist/Arduino" todir="${build.dir}" />
            <chmod dir="build/linux" includes="**/Arduino" perm="ugo+rx"/>
        </sequential>
    </macrodef>

    <macrodef name="setup-macosx">
        <sequential>
            <copy todir="${build.dir}/lib">
                <fileset dir="build/macosx/dist">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="build/macosx/dist">
                    <include name="*.jnilib"/>
                </fileset>
            </copy>
            <copy todir="${build.dir}/Arduino.app">
                <fileset dir="build/macosx/dist/Arduino.app" />
            </copy>

            <copy todir="${build.dir}/drivers">
                <fileset dir="build/macosx/dist/drivers" />
            </copy>

            <exec executable="unzip" searchpath="true">
                <arg value="-X" />
                <arg value="build/macosx/dist/tools/tools-universal.zip" />
                <arg value="-d" />
                <arg value="${build.dir}/hardware" />
            </exec>
            <unzip src="build/macosx/dist/tools/arm_tools_macosx.zip"    dest="${build.dir}/hardware/tools"/>
            <copy file="build/macosx/dist/tools/sfbdl"  todir="${build.dir}/hardware/uploaders/bin"/>
            <copy file="build/macosx/dist/tools/sfbprog"  todir="${build.dir}/hardware/uploaders/bin"/>
            <copy file="build/macosx/dist/tools/sfbmon"  todir="${build.dir}/hardware/uploaders/bin"/>
        </sequential>
    </macrodef>


    <target name="get.OS">
        <!-- Get Shared files -->
        <setup-shared/>

        <!-- Get OS Specific files -->
        <if>
            <os family="windows" />
            <then>
                <!--- Windows -->
                <setup-windows/>
            </then>

        <elseif>
            <os family="mac" />
            <then>
                <!--- Mac -->
                <setup-macosx/>
            </then>
        </elseif>

        <elseif>
            <os family="unix" />
            <then>
                <!--- Linux -->
                <setup-linux/>
            </then>
        </elseif>

        </if>

        <!-- Common OS actions -->

        <!-- Slim down the installation -->
        <delete dir="${build.dir}/hardware/tools/arm-none-eadi/share/doc/html"/>

    </target>

    <target name="dist.OS">

        <!-- Distribute OS Specific files -->
        <if>
            <os family="windows" />
            <then>
                <!--- Windows -->

                 <!--Compile the windows launcher -->
                <exec executable="./build/windows/launcher/launch4j/launch4j">
                    <arg line="../config.xml"/>
                </exec>
            </then>

        <elseif>
            <os family="mac" />
            <then>
                <!--- Mac -->

                <copy todir="${build.dir}/Arduino.app/Contents/Resources" >
                    <fileset dir="${build.dir}/lib" >
                        <include name="**/*" />
                    </fileset>
                    <fileset dir="${build.dir}/jar" >
                        <include name="**/*" />
                    </fileset>
                </copy>
                
                <!-- Overwrite using architecture specific distribution libraries -->
                <copy todir="${build.dir}/Arduino.app/Contents/Resources" overwrite="true">
                    <fileset dir="build/macosx/dist/Arduino.app/Contents/Resources/Java" >
                        <include name="librxtxSerial.jnilib" />
                    </fileset>
                </copy>
                
                <move todir="${build.dir}/Arduino.app/Contents/Resources/Java">
                    <fileset dir="${build.dir}/Arduino.app/Contents/Resources">
                        <include name="*.jnilib"/>
                        <include name="*.jar"/>
                    </fileset>
                </move>
                <set-permissions dir="${build.dir}" />

                <!-- Remove the x86_64 Slice, so we always run in 32 bit mode
                <exec dir="${build.dir}/Arduino.app/Contents/MacOS" executable="lipo" searchpath="true">
                    <arg line="-remove x86_64 -output Arduino_32 Arduino"/>
                </exec>
                <exec dir="${build.dir}/Arduino.app/Contents/MacOS" executable="mv" searchpath="true">
                    <arg line="Arduino Arduino_64"/>
                </exec>
                <exec dir="${build.dir}/Arduino.app/Contents/MacOS" executable="mv" searchpath="true">
                    <arg line="Arduino_32 Arduino"/>
                </exec>
-->
            </then>
        </elseif>

        <elseif>
            <os family="unix" />
            <then>
                <!--- Linux -->

                <set-permissions dir="${build.dir}"/>
                <chmod file="${build.dir}/Arduino" perm="ugo+rx" />
            </then>
        </elseif>

        </if>
    </target>


    <!--
        ===================================================================
         Run Targets
        ===================================================================
    -->

    <target name="run.OS">
        <if>
            <os family="windows" />
            <then>
                <!--- Windows -->
                <exec executable="${build.dir}/arduino" />
            </then>

        <elseif>
            <os family="mac" />
            <then>
                <!--- Mac -->
                <exec executable="./build/macosx/work/Arduino.app/Contents/MacOS/Arduino" />
            </then>
        </elseif>

        <elseif>
            <os family="unix" />
            <then>
                <!--- Linux -->
                <exec dir="${build.dir}" executable="./Arduino" />
            </then>
        </elseif>

        </if>
    </target>



    <macrodef name="set-permissions">
        <attribute name="dir" />
        <sequential>
            <exec executable="chmod">
                <arg value="-R" />
                <arg value="777" />
                <arg value="@{dir}" />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="set-perm">
        <attribute name="dir" />
        <attribute name="mode" />
        <sequential>
            <exec executable="chmod">
                <arg value="-R" />
                <arg value="@{mode}" />
                <arg value="@{dir}" />
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="set-owner">
        <attribute name="dir" />
        <attribute name="user" />
        <attribute name="group" />
        <sequential>
            <echo message="Setting owner" />
            <exec executable="chown" searchpath="true">
                <arg value="-R" />
                <arg value="@{user}:@{group}" />
                <arg value="@{dir}" />
            </exec>
        </sequential>
    </macrodef>

    <!--
        ===================================================================
         Package Targets
        ===================================================================
    -->

    <target name="package.OS">
        <if>
            <os family="windows" />
            <then>
                <!--- Windows -->
                <package-windows-zip/>
            </then>

        <elseif>
            <os family="mac" />
            <then>
                <!--- Mac -->
                <package-macosx/>
            </then>
        </elseif>

        <elseif>
            <os family="unix" />
            <then>
                <!--- Linux -->
                <package-linux/>
            </then>
        </elseif>

        </if>
    </target>

    <macrodef name="package-windows-zip" >
        <sequential>
            <property name="package.windows.name" value="Arduino_win32.zip" />
            <delete dir="${package.dir}" />

            <!-- Move into a temporary area to create the zip -->
            <copy todir="build/windows/package/Arduino">
                <fileset dir="build/windows/work" />
            </copy>

            <!-- Create the zip package -->
            <zip destfile="${package.dir}/${package.windows.name}"
                 basedir="${package.dir}"
                 includes="Arduino/**/*"/>

            <!-- Create the public version info file -->
            <echo file="${package.dir}/${package.windows.name}.txt">
distribution.name=Antipasto Arduino
distribution.file=${package.windows.name}
distribution.version=${build.version}</echo>
        </sequential>
    </macrodef>

    <macrodef name="package-windows-msi" >
        <sequential>
            <property name="package.windows.name" value="Arduino_win32.msi" />

            <delete dir="build/windows/package" />

            <unzip src="build/windows/packager.zip" dest="build/windows" />
            <copy file="build/windows/Antipasto-package.aip" todir="build/windows/package" />
            <copy todir="build/windows/package/Arduino">
                <fileset dir="build/windows/work" />
            </copy>

            <exec executable="build/windows/packager/AdvancedInstaller.com" >
                <arg value="/edit" />
                <arg value="build\windows\package\Antipasto-package.aip" />
                <arg value="/AddFolder" />
                <arg value="APPDIR" />
                <arg value="build\windows\package\Arduino" />
            </exec>
            <exec executable="build/windows/packager/AdvancedInstaller.com" >
                <arg value="/edit" />
                <arg value="build\windows\package\Antipasto-package.aip" />
                <arg value="/SetVersion" />
                <arg value="${build.version}" />
            </exec>
            <exec executable="build/windows/packager/AdvancedInstaller.com" >
                <arg value="/edit" />
                <arg value="build\windows\package\Antipasto-package.aip" />
                <arg value="/NewShortcut" />
                <arg value="-name" />
                <arg value="Arduino" />
                <arg value="-target" />
                <arg value="APPDIR\Arduino\arduino.exe" />
                <arg value="-dir" />
                <arg value="ProgramMenuFolder\Arduino" />
            </exec>
            <exec executable="build/windows/packager/AdvancedInstaller.com" >
                <arg value="/build" />
                <arg value="build\windows\package\Antipasto-package.aip" />
            </exec>
            <move file="build/windows/package/Antipasto-package.msi" tofile="build/windows/package/${package.windows.name}" />
            <delete dir="build/windows/packager" />
            <echo file="${package.dir}/${package.windows.name}.txt">distribution.version=${build.version}</echo>
        </sequential>
    </macrodef>

    <macrodef name="package-linux">
        <sequential>
            <property name="package.linux.name" value="Arduino_linux.tgz" />

            <delete dir="${package.dir}" />
            <mkdir  dir="${package.dir}" />

            <copy todir="${package.dir}/Arduino" >
                <fileset dir="${build.dir}" />
            </copy>
            <set-permissions dir="${package.dir}/Arduino" />
            <exec executable="tar" searchpath="true" dir="${package.dir}">
                    <arg value="czvf" />
                    <arg value="${package.linux.name}" />
                    <arg value="Arduino" />
            </exec>
            <echo file="${package.dir}/${package.linux.name}.txt">
distribution.name=Antipasto Arduino
distribution.file=${package.linux.name}
distribution.version=${build.version}</echo>
        </sequential>
    </macrodef>

    <macrodef name="package-macosx">
        <sequential>

            <property name="package.macosx.name" value="Arduino_macosx" />

            <delete dir="${package.dir}" />

            <mkdir  dir="${package.dir}" />
            <mkdir  dir="${package.dir}/Package_Root"/>
            <mkdir  dir="${package.dir}/Package_Root/Applications"/>
            <mkdir  dir="${package.dir}/Package_Root/usr/local"/>
            <mkdir  dir="${package.dir}/Resources"/>

            <exec executable="unzip" searchpath="true">
                <arg value="-X" />
                <arg value="${dist.dir}/tools/avr_tools_macosx.zip" />
                <arg value="-d" />
                <arg value="${package.dir}/Package_Root/usr/local" />
            </exec>

            <exec executable="unzip" searchpath="true">
                <arg value="-X" />
                <arg value="${dist.dir}/tools/osx_libraries.zip" />
                <arg value="-d" />
                <arg value="${package.dir}/Package_Root/usr/local" />
            </exec>

            <exec executable="mv" searchpath="true">
                <arg value="${build.dir}" />
                <arg value="${package.dir}/Package_Root/Applications/Arduino" />
            </exec>


            <copy file="build/macosx/dist/Info.plist"        todir="${package.dir}/Resources" />
            <copy file="build/macosx/dist/Description.plist" todir="${package.dir}/Resources" />

            <!-- Substitute the token with the build version -->
            <replace file="${package.dir}/Resources/Info.plist"
                     token="@BUILD_VERSION" value="${build.version}"/>
            <replace file="${package.dir}/Resources/Description.plist"
                     token="@BUILD_VERSION" value="${build.version}"/>

            <set-perm  dir="${package.dir}" mode="777" />
            <set-owner dir="${package.dir}" user="root" group="wheel" />
            <set-owner dir="${package.dir}/Package_Root/Applications" user="root" group="admin" />

            <exec executable="/Developer/Applications/Utilities/PackageMaker.app/Contents/MacOS/PackageMaker">
                <arg value="-build" />
                <arg value="-ds" />
                <arg value="-p"/>
                <arg value="${package.dir}/${package.macosx.name}.pkg"/>
                <arg value="-f" />
                <arg value="${package.dir}/Package_Root"/>
                <arg value="-r" />
                <arg value="${package.dir}/Resources"/>
                <arg value="-i" />
                <arg value="${package.dir}/Resources/Info.plist"/>
                <arg value="-d" />
                <arg value="${package.dir}/Resources/Description.plist"/>
            </exec>

            <exec executable="mv" searchpath="true">
                <arg value="${package.dir}/Package_Root/Applications/Arduino" />
                <arg value="${build.dir}" />
            </exec>

            <exec executable="hdiutil" searchpath="true">
                <arg value="create" />
                <arg value="-srcfolder" />
                <arg value="${package.dir}/${package.macosx.name}.pkg" />
                <arg value="${package.dir}/${package.macosx.name}.dmg" />
            </exec>
            <echo file="${package.dir}/${package.macosx.name}.dmg.txt">
distribution.name=Antipasto Arduino
distribution.file=${package.macosx.name}
distribution.version=${build.version}</echo>
        </sequential>
    </macrodef>


    <!--
        ===================================================================
         Upload Targets
        ===================================================================
    -->

    <target name="upload.OS">
        <if>
            <os family="windows" />
            <then>
                <!--- Windows -->
                <fileset id="upload.files" dir="${package.dir}">
                    <include name="Arduino_win32.zip.txt"/>
                    <include name="Arduino_win32.zip"/>
                </fileset>
            </then>

        <elseif>
            <os family="mac" />
            <then>
                <!--- Mac -->
                <fileset id="upload.files" dir="${package.dir}">
                    <include name="Arduino_macosx.dmg.txt"/>
                    <include name="Arduino_macosx.dmg"/>
                </fileset>
            </then>
        </elseif>

        <elseif>
            <os family="unix" />
            <then>
                <!--- Linux -->
                <fileset id="upload.files" dir="${package.dir}">
                    <include name="Arduino_linux.tgz.txt"/>
                    <include name="Arduino_linux.tgz"/>
                </fileset>
            </then>
        </elseif>
        </if>

        <!-- Send the files -->
        <ftp server="liquidware.org"
             userid="${username}"
             password="${password}"
             remotedir="public_html/illuminatolabs/ide/">
            <fileset refid="upload.files"/>
        </ftp>
    </target>

</project>


